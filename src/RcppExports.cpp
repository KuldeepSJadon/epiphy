// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// costTotiCPP
double costTotiCPP(long i, NumericMatrix& flow, NumericMatrix& cost, std::string type, bool average);
RcppExport SEXP _epiphy_costTotiCPP(SEXP iSEXP, SEXP flowSEXP, SEXP costSEXP, SEXP typeSEXP, SEXP averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type i(iSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type cost(costSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type average(averageSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotiCPP(i, flow, cost, type, average));
    return rcpp_result_gen;
END_RCPP
}
// costTotCPP
double costTotCPP(NumericMatrix& flow, NumericMatrix& cost);
RcppExport SEXP _epiphy_costTotCPP(SEXP flowSEXP, SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotCPP(flow, cost));
    return rcpp_result_gen;
END_RCPP
}
// insertCPP
NumericVector insertCPP(NumericVector& vect, int i, const double& value);
RcppExport SEXP _epiphy_insertCPP(SEXP vectSEXP, SEXP iSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type vect(vectSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const double& >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(insertCPP(vect, i, value));
    return rcpp_result_gen;
END_RCPP
}
// dispersalCPP
NumericMatrix dispersalCPP(int nfoci, int xrate, int ngen, double lambda);
RcppExport SEXP _epiphy_dispersalCPP(SEXP nfociSEXP, SEXP xrateSEXP, SEXP ngenSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nfoci(nfociSEXP);
    Rcpp::traits::input_parameter< int >::type xrate(xrateSEXP);
    Rcpp::traits::input_parameter< int >::type ngen(ngenSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(dispersalCPP(nfoci, xrate, ngen, lambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epiphy_costTotiCPP", (DL_FUNC) &_epiphy_costTotiCPP, 5},
    {"_epiphy_costTotCPP", (DL_FUNC) &_epiphy_costTotCPP, 2},
    {"_epiphy_insertCPP", (DL_FUNC) &_epiphy_insertCPP, 3},
    {"_epiphy_dispersalCPP", (DL_FUNC) &_epiphy_dispersalCPP, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_epiphy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
