// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// costTotiCPP
double costTotiCPP(long i1, NumericMatrix& flow, NumericMatrix& cost, std::string type, bool averaged, bool absolute);
RcppExport SEXP _epiphy_costTotiCPP(SEXP i1SEXP, SEXP flowSEXP, SEXP costSEXP, SEXP typeSEXP, SEXP averagedSEXP, SEXP absoluteSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type i1(i1SEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type cost(costSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type averaged(averagedSEXP);
    Rcpp::traits::input_parameter< bool >::type absolute(absoluteSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotiCPP(i1, flow, cost, type, averaged, absolute));
    return rcpp_result_gen;
END_RCPP
}
// costTotCPP
double costTotCPP(NumericMatrix& flow, NumericMatrix& cost);
RcppExport SEXP _epiphy_costTotCPP(SEXP flowSEXP, SEXP costSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type flow(flowSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type cost(costSEXP);
    rcpp_result_gen = Rcpp::wrap(costTotCPP(flow, cost));
    return rcpp_result_gen;
END_RCPP
}
// as_matrix_transport
NumericMatrix as_matrix_transport(List& x, double dim_mat);
RcppExport SEXP _epiphy_as_matrix_transport(SEXP xSEXP, SEXP dim_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type dim_mat(dim_matSEXP);
    rcpp_result_gen = Rcpp::wrap(as_matrix_transport(x, dim_mat));
    return rcpp_result_gen;
END_RCPP
}
// ntotfoci
NumericVector ntotfoci(int nfoci, int xrate, int ngen, int ngen_active);
RcppExport SEXP _epiphy_ntotfoci(SEXP nfociSEXP, SEXP xrateSEXP, SEXP ngenSEXP, SEXP ngen_activeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nfoci(nfociSEXP);
    Rcpp::traits::input_parameter< int >::type xrate(xrateSEXP);
    Rcpp::traits::input_parameter< int >::type ngen(ngenSEXP);
    Rcpp::traits::input_parameter< int >::type ngen_active(ngen_activeSEXP);
    rcpp_result_gen = Rcpp::wrap(ntotfoci(nfoci, xrate, ngen, ngen_active));
    return rcpp_result_gen;
END_RCPP
}
// dispersalCPP
NumericMatrix dispersalCPP(int nfoci, int xrate, double lambda, int ngen, int ngen_active);
RcppExport SEXP _epiphy_dispersalCPP(SEXP nfociSEXP, SEXP xrateSEXP, SEXP lambdaSEXP, SEXP ngenSEXP, SEXP ngen_activeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nfoci(nfociSEXP);
    Rcpp::traits::input_parameter< int >::type xrate(xrateSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type ngen(ngenSEXP);
    Rcpp::traits::input_parameter< int >::type ngen_active(ngen_activeSEXP);
    rcpp_result_gen = Rcpp::wrap(dispersalCPP(nfoci, xrate, lambda, ngen, ngen_active));
    return rcpp_result_gen;
END_RCPP
}
// collectCPP
NumericMatrix collectCPP(NumericMatrix disperse, NumericMatrix quadrat);
RcppExport SEXP _epiphy_collectCPP(SEXP disperseSEXP, SEXP quadratSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type disperse(disperseSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type quadrat(quadratSEXP);
    rcpp_result_gen = Rcpp::wrap(collectCPP(disperse, quadrat));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epiphy_costTotiCPP", (DL_FUNC) &_epiphy_costTotiCPP, 6},
    {"_epiphy_costTotCPP", (DL_FUNC) &_epiphy_costTotCPP, 2},
    {"_epiphy_as_matrix_transport", (DL_FUNC) &_epiphy_as_matrix_transport, 2},
    {"_epiphy_ntotfoci", (DL_FUNC) &_epiphy_ntotfoci, 4},
    {"_epiphy_dispersalCPP", (DL_FUNC) &_epiphy_dispersalCPP, 5},
    {"_epiphy_collectCPP", (DL_FUNC) &_epiphy_collectCPP, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_epiphy(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
